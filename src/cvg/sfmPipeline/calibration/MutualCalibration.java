/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package cvg.sfmPipeline.calibration;

public class MutualCalibration {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public MutualCalibration(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(MutualCalibration obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        CalibrationJNI.delete_MutualCalibration(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setRotationTest(SWIGTYPE_p_std__vectorT_double_t value) {
    CalibrationJNI.MutualCalibration_rotationTest_set(swigCPtr, this, SWIGTYPE_p_std__vectorT_double_t.getCPtr(value));
  }

  public SWIGTYPE_p_std__vectorT_double_t getRotationTest() {
    return new SWIGTYPE_p_std__vectorT_double_t(CalibrationJNI.MutualCalibration_rotationTest_get(swigCPtr, this), true);
  }

  public void setPRotationTest(SWIGTYPE_p_double value) {
    CalibrationJNI.MutualCalibration_pRotationTest_set(swigCPtr, this, SWIGTYPE_p_double.getCPtr(value));
  }

  public SWIGTYPE_p_double getPRotationTest() {
    long cPtr = CalibrationJNI.MutualCalibration_pRotationTest_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_double(cPtr, false);
  }

  public MutualCalibration(long heightImage, long widthImage, long heightBoard, long widthBoard, boolean useOpenCVCorner, boolean useOpenCVCalibration) {
    this(CalibrationJNI.new_MutualCalibration__SWIG_0(heightImage, widthImage, heightBoard, widthBoard, useOpenCVCorner, useOpenCVCalibration), true);
  }

  public MutualCalibration(long heightImage, long widthImage, long heightBoard, long widthBoard, boolean useOpenCVCorner) {
    this(CalibrationJNI.new_MutualCalibration__SWIG_1(heightImage, widthImage, heightBoard, widthBoard, useOpenCVCorner), true);
  }

  public MutualCalibration(long heightImage, long widthImage, long heightBoard, long widthBoard) {
    this(CalibrationJNI.new_MutualCalibration__SWIG_2(heightImage, widthImage, heightBoard, widthBoard), true);
  }

  public boolean tryAddingChessboardImage(long inputImage, long outputImage) {
    return CalibrationJNI.MutualCalibration_tryAddingChessboardImage(swigCPtr, this,  inputImage,  outputImage);
  }

  public void addIMUData(double r0, double r1, double r2) {
    CalibrationJNI.MutualCalibration_addIMUData(swigCPtr, this, r0, r1, r2);
  }

  public long getNumberOfImages() {
    return CalibrationJNI.MutualCalibration_getNumberOfImages(swigCPtr, this);
  }

  public void calibrateCamera() {
    CalibrationJNI.MutualCalibration_calibrateCamera(swigCPtr, this);
  }

  public void mutualCalibrate() {
    CalibrationJNI.MutualCalibration_mutualCalibrate(swigCPtr, this);
  }

}
